"use strict";(self.webpackChunkalphabuilder_site=self.webpackChunkalphabuilder_site||[]).push([[3442],{8665:(e,i,n)=>{n.d(i,{A:()=>l});var t=n(6540),s=n(6347),a=n(4848);function l({toc:e,children:i,activeSection:n,onSectionChange:l}){const r=(0,s.zy)();return(0,t.useEffect)(()=>{if(r.hash){const[i,n]=r.hash.replace("#","").split("/");e.find(e=>e.id===i)&&(l(i),n&&setTimeout(()=>{const e=document.getElementById(n);e&&e.scrollIntoView({behavior:"smooth",block:"start"})},150))}},[r.hash,e,l]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"markdown-spacer-card",children:(0,a.jsx)("div",{className:"spacer-inner",children:(0,a.jsx)("p",{style:{opacity:.6},children:" "})})}),(0,a.jsxs)("div",{className:"markdown-two-col",children:[(0,a.jsx)("aside",{className:"markdown-toc",children:(0,a.jsx)("ul",{children:e.map(e=>(0,a.jsxs)("li",{children:[(0,a.jsx)("button",{className:"main-link "+(n===e.id?"active":""),onClick:()=>{l(e.id),window.location.hash=e.id},children:e.value}),n===e.id&&e.children&&(0,a.jsx)("ul",{className:"sub-list",children:e.children.map(i=>(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:`#${e.id}/${i.id}`,onClick:n=>{n.preventDefault(),window.location.hash=`${e.id}/${i.id}`;const t=document.getElementById(i.id);t&&t.scrollIntoView({behavior:"smooth",block:"start"})},children:i.value})},i.id))})]},e.id))})}),(0,a.jsx)("main",{className:"markdown-content",children:i})]})]})}},9100:(e,i,n)=>{n.r(i),n.d(i,{default:()=>c});var t=n(6540),s=n(2874),a=n(8665),l=n(1028),r=n(4848);const d=[{id:"intro",value:"Introduction",children:[{id:"status",value:"Current Status"},{id:"planned",value:"Planned Features"}]},{id:"usage",value:"Usage",children:[{id:"installation",value:"Installation"},{id:"quickstart",value:"Quickstart Example"}]}];function c(){const[e,i]=(0,t.useState)("intro"),n={intro:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h1",{id:"intro",children:"AlphaBuilder-Optimizer"}),(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"AlphaBuilder-Optimizer"})," is an experimental Python package for building and testing optimization tools in trading and portfolio management."]}),(0,r.jsx)("p",{children:"It provides a clean API interface and serves as a foundation for research, development, and integration into modular trading systems."}),(0,r.jsx)("h2",{id:"status",children:"Current Status"}),(0,r.jsx)("p",{children:"The project is in its early stages. The current version includes:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["A ",(0,r.jsx)("strong",{children:"FastAPI backend"})," for portfolio optimization."]}),(0,r.jsxs)("li",{children:["An ",(0,r.jsx)("strong",{children:"equal-weighted strategy"})," as the initial supported method."]}),(0,r.jsxs)("li",{children:["A ",(0,r.jsx)("strong",{children:"framework"})," for extending to more optimization approaches."]})]}),(0,r.jsx)("h2",{id:"planned",children:"Planned Features"}),(0,r.jsx)("h4",{children:"Portfolio Optimization"}),(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Classical methods: Markowitz, Black-Litterman, convex optimization."})}),(0,r.jsx)("h4",{children:"Metaheuristics"}),(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Genetic algorithms, simulated annealing, swarm intelligence."})}),(0,r.jsx)("h4",{children:"Reinforcement Learning"}),(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Adaptive and regime-aware optimization approaches."})})]}),usage:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h1",{id:"usage",children:"Usage"}),(0,r.jsx)("p",{children:"This section describes how to install and use AlphaBuilder-Optimizer."}),(0,r.jsx)("h2",{id:"installation",children:"Installation"}),(0,r.jsx)("div",{className:"custom-codeblock",children:(0,r.jsx)(l.A,{language:"bash",children:"pip install alphabuilder-optimizer"})}),(0,r.jsx)("h2",{id:"quickstart",children:"Quickstart Example"}),(0,r.jsx)("div",{className:"custom-codeblock",children:(0,r.jsx)(l.A,{language:"python",children:'# Import\nfrom alphabuilder_optimizer import OptimizerClient\n\n# Initialize client\nclient = OptimizerClient(api_key="YOUR_API_KEY")\n\n# Run optimization\nresult = client.optimize(\n    idempotency_key="ALPHABUILDER042",\n    assets=["asset_A", "asset_B", "asset_C", "asset_D", "asset_E"],\n    constraint="equal_weighted",\n    risk_free_rate=0.05,\n    expected_returns=[0.1, 0.12, 0.15, 0.23, 0.56],\n    covariance=[\n        [0.1, 0.02, 0.03, 0.04, 0.05],\n        [0.02, 0.08, 0.01, 0.06, 0.07],\n        [0.03, 0.01, 0.09, 0.02, 0.03],\n        [0.04, 0.06, 0.02, 0.11, 0.08],\n        [0.05, 0.07, 0.03, 0.08, 0.12]\n    ]\n)\n\nprint(result)  # JSON/dict with optimized portfolio weights\n\n# Retrieve stored items\nres = client.get_items()'})})]})};return(0,r.jsx)(s.A,{title:"AlphaBuilder-Optimizer",children:(0,r.jsx)(a.A,{toc:d,activeSection:e,onSectionChange:i,children:n[e]})})}}}]);